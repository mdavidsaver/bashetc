#!/bin/sh
# shell function library by Michael Davidsaver <mdavidsaver@gmail.com>

# <user@host:env>-{$PWD
# [HH:MM AM] $
#or
# <host:env>-{$PWD
# [HH:MM AM] #
#
prompt3(){
local RETV=$?
local GREEN="\[\033[0;32m\]"
local LGGREEN="\[\033[1;32m\]"
local BLUE="\[\033[0;34m\]"
local LGBLUE="\[\033[1;34m\]"
local CYAN="\[\033[0;36m\]"
local RED="\[\033[0;31m\]"
local LGRED="\[\033[1;31m\]"
local BLRED="\[\033[5;31m\]"
local DEFAULT="\[\033[0;0m\]"
# <
PS1="${CYAN}\074"
# user@
[ $UID -ne 0 ] && PS1="${PS1}${LGGREEN}\u${CYAN}@"
# host
PS1="${PS1}${LGGREEN}\h"
# :venv
[ -n "$VIRTUAL_ENV" ] && PS1="${PS1}${CYAN}:${LGRED}`basename $VIRTUAL_ENV`"
# >-{PWD\n
PS1="${PS1}${CYAN}\076-{${LGBLUE}${PWD}\n"
# [time]
PS1="${PS1}${CYAN}\133${LGRED}\@${CYAN}\135"
# ($?)
[ $RETV -ne 0 ] && PS1="${PS1}${CYAN}\050${BLRED}${RETV}${CYAN}\051"
# $
PS1="${PS1}${DEFAULT} "'\$ '
}

# no colors
# [ user@host ] $
prompt0(){
PS1="\133 \u@\h \135 "'\$ '
}

setprompt(){
	case $1 in
	prompt*) PROMPT_COMMAND=$1;;
	*)	PROMPT_COMMAND=prompt$1;;
	esac
	return 0
}

inbg() {
	"$@" &> /dev/null &
}

setalias(){
	case "`uname -s`,`uname -r`" in
	Linux,*)
		alias ls='ls -h --color=auto'
		alias du='du -csh'
		;;
	SunOS,*)
		alias ls='ls -h'
		;;
	esac
	alias df='df -h'
	alias ll='ls -l'
	alias srsync='rsync --rsh=ssh'
	alias gdb='gdb --silent'
	unalias nano &>/dev/null
	unalias pico &>/dev/null
	if type nano &>/dev/null
	then
		alias pico='nano -w'
		alias nano='nano -w'
		export EDITOR=nano
	elif type pico &>/dev/null
	then
		alias nano='pico -w'
		alias pico='pico -w'
		export EDITOR=pico
	else
		alias pico='pico -w'
		alias nano='nano -w'
	fi
	alias gpg-findme='echo -e "UPDATESTARTUPTTY\n/bye" | gpg-connect-agent --no-autostart'
	alias scdkill='gpgconf --kill scdaemon'
	return 0
}

# add a directory to the PATH variable
addpath(){
	if [[ "${3}" == "pre" ]];then
		eval export ${2:-PATH}="$1:\$${2:-PATH}"
	else
		eval export ${2:-PATH}="\$${2:-PATH}:$1"
	fi
}

# so I don't forget this useful command
# will list procs using a filesystem
fusefs () {
	[ -z "${1}" ] && return
	local pids="$(fuser -m $1 2>/dev/null )"
	[ -z "$pids" ]  && return
	ps -p $pids
}

setproxy() {
	case "$1" in
	bnl)
		export http_proxy=http://192.168.1.140:3128/
		;;
	bnlint)
		export http_proxy=http://192.168.1.130:3128/
		;;
	740)
		export http_proxy=http://proxy:8888/
		;;
	localhost)
		export http_proxy=http://localhost:3128/
		;;
	'')
		unset http_proxy
		unset https_proxy
		unset HTTP_PROXY
		unset ftp_proxy
		return 0
		;;
	*)	echo "Invalid $1"
		return 1 ;;
	esac
	export https_proxy="${http_proxy}"
	export HTTP_PROXY="${http_proxy}"
	export ftp_proxy="${http_proxy}"
}

# Find the most recently created ssh agent socket w/ keys
findagent() {
	for ff in `ls -1t /tmp/ssh-*/agent.* /tmp/gpg-*/S.gpg-agent.ssh 2>/dev/null`
	do
		SSH_AUTH_SOCK=$ff ssh-add -l &>/dev/null
		case "$?" in
		0)
					echo "$ff: Found"
					export SSH_AUTH_SOCK=$ff
					break;;
		1)
					echo "$ff: No keys";;
		2)
					echo "$ff: No agent connected (Prune)";;
		esac
	done
}

git-setup() {
	git config --global user.name 'Michael Davidsaver'
	git config --global user.email 'mdavidsaver@gmail.com'
	git config --global alias.ci commit
	git config --global alias.co checkout
	git config --global alias.st status
	git config --global alias.k !gitk
	git config --global alias.ff 'merge --ff-only'
	git config --global merge.summary true
	git config --global color.ui true
	git config --global diff.renameLimit 0
	git config --global sendemail.smtpencryption tls
	git config --global sendemail.smtpserver smtp.gmail.com
	git config --global sendemail.smtpuser mdavidsaver@gmail.com
	git config --global sendemail.smtpserverport 587
	git config --global --replace-all url.git@github.com:.pushInsteadOf https://github.com/
	git config --global --add         url.git@github.com:.pushInsteadOf git://github.com/
	git config --global --replace-all url.git+ssh://git.launchpad.net/.pushInsteadOf https://git.launchpad.net/
	git config --global --add         url.git+ssh://git.launchpad.net/.pushInsteadOf lp:
	git config --global --replace-all url.https://git.launchpad.net/.insteadof lp:
	git config --global --remove-section url.ssh://toolbox42/~/epics/
	git config --global --remove-section url.ssh://sun48/~/www/git/
	git config --global --remove-section url.ssh://toolbox4.bnl.gov/~/epics/
	git config --global --remove-section url.ssh://fido.bnl.gov/~/www/git/
}

git-bzr-cleanup() {
	if ! [ "$1" -a -e ".git/bzr/$1" ]
	then
		echo "$1 is not a valid bzr remote" >&2
		return 1
	fi
	echo "Remove $1"
	git remote show "$1"
	git remote remove "$1" \
	&& git update-ref -d "refs/bzr/$1/heads/master" \
	&& rm -r ".git/bzr/$1" \
	&& echo "Done" || echo "Fail"
}

firsttime() {
	# New machine setup
	# Configure nano syntax highlighting
	if [ ! -f ~/.nanorc -a -d /usr/share/nano ]; then
		find /usr/share/nano -name '*.nanorc' -exec printf 'include "%s"\n' {} \; > ~/.nanorc
	fi
	# Enable GDB history
	[ -f ~/.gdbinit ] || cat << EOF > ~/.gdbinit
set history filename ~/.gdb_history
set history save
EOF
	git-setup
	if [ -f ~/.bashrc ] && grep bashetc ~/.bashrc; then echo -n; else
		cat << EOF >> ~/.bashrc
if [ -r ~/.bashetc ];then
	source ~/.bashetc
	setprompt 3
	setalias
fi
EOF
	fi
}

udevdump() {
    [ -z "$1" -o ! -e "$1" ] && echo "udevdump </dev/somefile>" && return 0
    udevadm info -a -p $(udevadm info -q path -n "$1") --attribute-walk
}

udevtest() {
    [ -z "$1" -o ! -e "$1" ] && echo "udevdump </dev/somefile>" && return 0
    udevadm test --action=add $(udevadm info -q path -n "$1")
}

makepass(){
    local len=${1:-10}
    local cset=${2:-"[:alnum:]"}
    cat /dev/urandom|tr -dc "$cset" |fold -w "$len"|head -n1
}

fetchkey() {
    local key=5C159E669D69E2D4C4E74E540C8E1C8347330CFB
    echo $key:6: | gpg --import-ownertrust
    for KS in hkps://keys.openpgp.org \
        hkp://keys.gnupg.net/ \
        hkp://pool.sks-keyservers.net \
        hkp://search.keyserver.net
    do
      echo "Try keyserver $KS"
      gpg --keyserver $KS --keyserver-options 'timeout=5' --recv-keys $key && break
    done
    return $?
}

fetchsigned() {
    [ "$1" ] || return 1
    [ "$2" ] || return 2
    local tfile=`mktemp`
    local tsig=`mktemp`
    wget -O "$tfile" "$2" \
    && wget -O "$tsig" "$2".asc \
    && gpg --verify "$tsig" "$tfile" \
    && mv "$tfile" "$1"
    local ret=$?
    rm -f "$tfile" "$tsig"
    return $ret
}

# get new version
updatebashetc(){
	local purl=http://mdavidsaver.github.io/bashetc/bashetc
	fetchsigned ~/bashetc "$purl"
	if diff -u ~/.bashetc ~/bashetc
	then
		echo "No difference"
		rm ~/bashetc
	else
		echo "Update .bashetc? (y,M,n)"
		local responce=n
		read responce
		if [ "$responce" = "y" ];then
			mv ~/.bashetc ~/.bashetc.old
			mv ~/bashetc ~/.bashetc
			. ~/.bashetc
			echo "Done."
		elif [ "$responce" == "M" ];then
			local MERGE="sdiff -w 80 -d -o ~/bashetc.merge ~/.bashetc ~/bashetc"
			if [ "$DISPLAY" -a -x $(type -p kdiff3) ];
			then
				MERGE="kdiff3 -m -o ~/bashetc.merge ~/.bashetc ~/bashetc"
			fi
			echo "Trying interactive merge with $MERGE"
			if eval $MERGE
			then
				mv ~/bashetc.merge ~/.bashetc
				rm ~/bashetc
				echo "Merge complete"
			else
				echo "Merge failed"
				return 1
			fi
		else
			mv ~/bashetc ~/bashetc.new
			echo "Abort"
			echo "New version saved as ~/bashetc.new"
			return 1
		fi
	fi
}
